export default {
  status_code: 0,
  status_msg: 'success',
  data: {
    title: '简历+面试的报告',
    overall_score: {
      score: 80,
      full_mark: 100,
      reason: null,
    },
    applicant_brief: '张丽丽的申请报告',
    education_brief: '北京交通大学海滨学院·计算机科学与技术·本科',
    experience_brief: '北京中文在线文化传媒有限公司·前端开发工程师',
    ai_interview: {
      section_score: {
        score: 75,
        full_mark: 100,
        reason: null,
      },
      detail_text: [
        {
          role: 'assistant',
          content:
            '张丽丽，您好，我是面试官千识，欢迎参加今天面试。首先，能否请您简单介绍下自己？',
          metadata: {
            ts: '2025-09-18T11:10:11.896265+08:00',
            t_sec: 0,
          },
        },
        {
          role: 'user',
          content:
            '你好，我叫张丽丽。然后目前是一直在北京工作，工作大概有9年时间，一直从事 Web 前端开发工作。我大概有经历4家面试，目目目前在我有4家工作经历，常用的技术栈就是 Vue，然后 TS 加 GS，然后包括 Vue 的一些框架呀，还有一些 UI 框架都是有用过的。',
          metadata: {
            ts: '2025-09-18T11:11:05.108142+08:00',
            t_sec: 53,
          },
        },
        {
          role: 'assistant',
          content:
            '谢谢你的介绍，张丽丽。你在前端领域有9年的经验，而且一直专注在Web开发方向，技术栈也集中在Vue和TypeScript这些现代前端体系上，这点和我们岗位的要求非常契合。\n\n接下来我们进入代码深度分析环节。想请教你一个问题：在处理跨端适配时，如果同一套组件在微信小程序和H5页面中表现不一致，比如布局错位或者事件触发异常，你会从哪些方面去排查和解决这类兼容性问题？',
          metadata: {
            ts: '2025-09-18T11:11:19.751279+08:00',
            t_sec: 67,
          },
        },
        {
          role: 'user',
          content:
            '你首先看一下这个样式布局是在哪一端没有问题，然后我们再去调试有一端的问题。可能是因为他们的一些和模型啊不匹配，不一致，所以导致的布局错乱，或者是有一些样式的问题，我们通常可以使用 Flex 布局啊，这种弹性布局来适配样式。事件触发异常的话，可能我们写的一些方法不兼容某一端。所以我们要改变一下这些事件触发的方式，换一下两端都通用的方式。',
          metadata: {
            ts: '2025-09-18T11:12:51.372373+08:00',
            t_sec: 159,
          },
        },
        {
          role: 'assistant',
          content:
            '嗯，你提到用 Flex 布局来增强弹性适配，这个思路很常见也有效。你说的“模型不一致”我理解可能是不同端的渲染引擎或组件模型差异导致的，比如小程序的自定义组件和 H5 的 DOM 模型确实不一样。\n\n那我想再深入问一下：当你发现某个使用了 `v-model` 的自定义表单组件，在 H5 端能正常双向绑定，但在微信小程序里数据更新不生效，你会怎么一步步去定位这个问题？会从哪些关键点入手？',
          metadata: {
            ts: '2025-09-18T11:12:59.562281+08:00',
            t_sec: 167,
          },
        },
        {
          role: 'user',
          content:
            '微信小程序里面数据更新不生效，可能它的这个数据不是响应式的。可能你会用了一些数组啊，然后你直接改变这个数组里面的某一个值，它是不会生效的。所以要看一下我们的原数据。的结构是否有问题。然后，如果数据结构没有问题的话，要看一下你是怎样改变这个数据里面的某一个值的。一般数组的话，我们可以用 set 或者是 get 来改变里面的值。',
          metadata: {
            ts: '2025-09-18T11:14:26.405789+08:00',
            t_sec: 254,
          },
        },
        {
          role: 'assistant',
          content:
            '对，你说得很到位，特别是在小程序里 Vue 的响应式系统受限时，直接操作数组索引或对象属性确实容易丢失响应性，用 `Vue.set` 或者通过解构、`splice` 等方式重建引用是常见解法。\n\n那我再追问一下：假设这个 `v-model` 是在跨端组件库中封装的，比如我们用的是 UniApp 这种多端统一框架，你发现某些情况下 `.sync` 或自定义 `model` 修饰符在小程序端失效，但 H5 正常。除了数据响应性之外，你会从编译时还是运行时的角度去排查？有没有具体遇到过类似的案例可以分享？',
          metadata: {
            ts: '2025-09-18T11:14:32.181352+08:00',
            t_sec: 260,
          },
        },
        {
          role: 'user',
          content: '这个应该要从',
          metadata: {
            ts: '2025-09-18T11:15:46.313120+08:00',
            t_sec: 334,
          },
        },
        {
          role: 'assistant',
          content:
            '你刚才提到这个问题可能需要从运行时和框架适配层面去分析，确实很关键。那我们接下来进入下一个环节——渲染与部署排查。\n\n你在项目中提到熟悉 Nuxt3 和 SSR，那我想请教一下：在使用 Nuxt3 做服务端渲染时，如果上线后发现首屏样式错乱，或者页面结构和客户端渲染不一致，出现 hydration mismatch 的警告，你会从哪些方面去系统性地排查和解决这个问题？',
          metadata: {
            ts: '2025-09-18T11:15:52.969730+08:00',
            t_sec: 341,
          },
        },
        {
          role: 'user',
          content: '这个你能跟我说一下为什么吗？我不太知道为什么。',
          metadata: {
            ts: '2025-09-18T11:16:50.308933+08:00',
            t_sec: 398,
          },
        },
        {
          role: 'assistant',
          content:
            '没关系，张丽丽，这个问题确实涉及到 SSR 渲染机制的一些细节。我来帮你理一下：在 Nuxt3 的 SSR 场景中，服务端会先生成 HTML 字符串返回给浏览器，然后客户端再用 JavaScript “激活”这些静态标签，这个过程叫做 hydration。如果服务端和客户端渲染出的 DOM 结构不一致，Vue 就会报 mismatch 警告，甚至导致样式错乱或交互失效。\n\n那我们可以换个角度来聊：你在实际项目中有没有遇到过类似“页面初始显示异常，但刷新后正常”或者“首屏内容闪动”的问题？当时是怎么排查的？是不是和服务端与客户端的渲染差异有关？',
          metadata: {
            ts: '2025-09-18T11:16:56.134551+08:00',
            t_sec: 404,
          },
        },
        {
          role: 'user',
          content:
            '出现过出现过，首屏没有展示数据，然后刷新后，然后数据会正常显示。这个是因为有一些在页，在代码中写的一些方法，它只能应用在服务端，只能应用在客户端。不能用在服务端，所以说会导致这种异常。比如说像有一些 window 方法，是不能用在服务端的，这样会报错。所以说我们尽量避免使用这些在客户端才能用的方法，然后就可以排除这种问题。',
          metadata: {
            ts: '2025-09-18T11:18:21.872758+08:00',
            t_sec: 490,
          },
        },
        {
          role: 'assistant',
          content:
            '对，你说得很准确。`window`、`document` 这些浏览器特有的全局对象在服务端是不存在的，如果在组件初始化时直接调用，就会导致客户端和服务端渲染不一致——比如服务端渲染时跳过某些逻辑，而客户端却执行了，从而引发 hydration 不匹配。\n\n那我想再深入问一下：当你发现某个第三方 UI 库内部使用了 `window` 或 `localStorage`，但在 SSR 时又必须用它，你会怎么处理？有没有具体采取过什么方案，比如通过动态引入、条件判断，或者 Nuxt3 提供的 `defineClientOnly` 这类机制来规避？',
          metadata: {
            ts: '2025-09-18T11:18:30.728639+08:00',
            t_sec: 498,
          },
        },
        {
          role: 'user',
          content:
            '我会加一些判断，然后判断是服务端的话就不会用这种方法，然后客户端的话就会使用 window local storage，或者是先判断一下有没有 window 这个方法，然后再具体使用里面具体的一一些 一些方法再去用。',
          metadata: {
            ts: '2025-09-18T11:19:52.252811+08:00',
            t_sec: 580,
          },
        },
        {
          role: 'assistant',
          content:
            "嗯，加运行时判断确实是最直接的方式，比如用 `typeof window !== 'undefined'` 来防护浏览器 API 的调用，这样能有效避免服务端报错。\n\n那我再补充问一下：在 Nuxt3 中，如果某个组件本身依赖较多客户端环境（比如图表、动画库），你更倾向于使用 `defineClientOnly` 包裹它，还是通过 `<client-only>` 标签来处理？这两种方式你在实际项目中怎么权衡选择？有没有考虑过对首屏加载性能或 SEO 的影响？",
          metadata: {
            ts: '2025-09-18T11:19:58.865045+08:00',
            t_sec: 587,
          },
        },
        {
          role: 'user',
          content:
            '如果说是逐渐依赖多客户端的情况下，我会先使用 client only 这种标签来处理。然后这种的话，因为在样式上面会比较方便。然后提范 client only 嗯。',
          metadata: {
            ts: '2025-09-18T11:21:38.666361+08:00',
            t_sec: 686,
          },
        },
        {
          role: 'assistant',
          content:
            '明白了，你选择用 `<client-only>` 来隔离客户端组件，确实在开发效率和样式隔离上更友好，尤其是在第三方库不可控的情况下是个很实用的做法。\n\n接下来我们进入第三个环节——开发与性能优化。\n\n你在多个项目中都承担了主导角色，那我想请你分享一下：在你负责的前端项目中，有没有针对首屏加载性能做过具体的优化实践？比如通过 Lighthouse 或者 Chrome DevTools 分析过关键指标？当时采取了哪些技术手段，最终页面加载速度或用户体验上有怎样的提升？',
          metadata: {
            ts: '2025-09-18T11:21:47.866321+08:00',
            t_sec: 696,
          },
        },
        {
          role: 'user',
          content: '可以从 可以从',
          metadata: {
            ts: '2025-09-18T11:23:00.526502+08:00',
            t_sec: 768,
          },
        },
        {
          role: 'assistant',
          content:
            '嗯，你可以从任何一个你印象比较深的项目说起，比如是不是做过资源懒加载、图片优化，或者跟构建打包相关的调整？有没有具体的数据变化，比如首屏时间从几秒降到几百毫秒这样的？',
          metadata: {
            ts: '2025-09-18T11:23:04.910968+08:00',
            t_sec: 773,
          },
        },
        {
          role: 'user',
          content: '我们会将打包的时候。',
          metadata: {
            ts: '2025-09-18T11:23:33.022424+08:00',
            t_sec: 801,
          },
        },
        {
          role: 'assistant',
          content:
            '好的，你说打包的时候会做些调整，那具体是在构建阶段做了哪些优化呢？比如有没有对 chunk 进行拆分、或者对第三方库做单独抽离？你是用 Vite 还是 Webpack 做构建的？可以结合一个实际项目说说吗？',
          metadata: {
            ts: '2025-09-18T11:23:37.513431+08:00',
            t_sec: 805,
          },
        },
        {
          role: 'user',
          content:
            '有做过，有对比过拆开，然后进行拆分，将一些大文件的项目进行压缩和拆分，包括一些 GS 呀，还有一些样式，然后做一些隔离，然后拆图，拆分出其他的一些第三方组件库，然后用的 是 white 构建的。',
          metadata: {
            ts: '2025-09-18T11:24:47.140415+08:00',
            t_sec: 875,
          },
        },
        {
          role: 'assistant',
          content:
            '明白了，你提到用 Vite 构建，并且对大文件进行了代码分割，比如把第三方库和公共样式单独抽离，这个做法很关键。那我想再深入问一下：在做这些拆分的时候，你是如何定义拆分策略的？比如是按路由懒加载，还是按组件级别做动态引入？有没有配合 `defineAsyncComponent` 或者路由级别的 `import()` 来实现组件级的懒加载？',
          metadata: {
            ts: '2025-09-18T11:24:52.644427+08:00',
            t_sec: 880,
          },
        },
        {
          role: 'user',
          content:
            '拆分策略的话，就是路由是懒加载的，然后 其他的我就不太记得了。',
          metadata: {
            ts: '2025-09-18T11:26:01.286965+08:00',
            t_sec: 949,
          },
        },
        {
          role: 'assistant',
          content: '感谢您的参与，面试时间已到，本次面试到此结束，再见。',
          metadata: {
            ts: '2025-09-18T11:26:02.220076+08:00',
            t_sec: 950,
          },
        },
      ],
      section_scores: [
        {
          score_item: {
            score: 75,
            feedback: [
              '候选人在面对跨端适配问题时，能够识别出微信小程序与H5在数据响应性上的差异，正确指出直接修改数组元素可能导致响应式失效的问题，并提出使用Vue.set或数组方法（如splice）来保证响应性，体现了对Vue响应式原理的基本理解。',
              '在回答v-model在小程序中失效的场景时，候选人提到了数据结构和修改方式的影响，具备一定的调试思路。但未能深入到UniApp等跨端框架的编译时处理机制，例如：.sync修饰符或自定义model在多端编译过程中可能被不同地解析或忽略，尤其是在小程序运行时受限于原生组件封装。',
              '缺乏对具体排查路径的系统化描述，例如：是否通过编译后的代码对比、检查props和事件命名是否符合小程序规范（如update:modelValue）、是否使用了不支持的语法糖等。也没有分享实际案例或工具（如UniApp的条件编译、调试器、renderjs使用限制）来支撑其经验。',
              '整体回答偏向通用性解决方案，缺少针对‘跨端组件库封装’这一高阶场景的深度分析，如运行时与编译时差异、自定义渲染层逻辑、多端行为抽象等高级前端工程化思维。',
              '建议：提升对跨端框架底层机制的理解，结合具体日志、编译输出或源码调试进行归因，而不仅停留在运行时数据操作层面。',
            ],
          },
          section_name: '代码深度分析',
        },
        {
          score_item: {
            score: 85,
            feedback: [
              '候选人准确指出了SSR场景下hydration mismatch的常见原因，即在服务端使用了仅客户端可用的API（如window、localStorage），导致客户端与服务端渲染结果不一致，体现了对Nuxt3渲染机制的基本理解。',
              "能够提出通过运行时判断typeof window !== 'undefined'来规避服务端报错，是一种实际可行的防护措施，具备一定的实战应对能力。",
              '在被引导后能正确回应客户端组件的处理方式，并提到使用<client-only>标签或defineClientOnly来隔离客户端依赖，符合Nuxt3的最佳实践。',
              '但回答中缺乏对更深层次排查手段的主动提及，例如如何利用Nuxt3的useSSRRef、useAsyncData等辅助 hydration 数据同步，也未讨论服务端日志、构建产物分析或 sourcemap 定位 mismatch 节点等系统性排查方法。',
              '对于<client-only>和defineClientOnly的选择标准不够清晰，未深入说明两者差异（如SSR占位处理、打包分割、性能影响）及对首屏渲染、SEO的实际权衡。',
              '整体逻辑较清晰，能结合项目经验作答，但在工具使用深度、优化方案完整性和自主问题定位能力上略有欠缺。',
            ],
          },
          section_name: '渲染与部署排查',
        },
        {
          score_item: {
            score: 65,
            feedback: [
              '候选人提到了使用 Vite 构建工具，并对大文件进行了代码分割、资源压缩和第三方库抽离，符合前端工程化中性能优化的基本实践，具备一定的事实准确性。',
              '在拆分策略上，仅提到路由懒加载，未能详细说明组件级别懒加载（如 defineAsyncComponent 或动态 import）的具体实现，缺乏深度和技术细节。',
              '未提供具体的性能指标对比数据（如首屏时间、LCP、FCP 等），也未提及使用 Lighthouse 或 Chrome DevTools 进行分析，缺少量化证据支持优化效果。',
              '回答中出现表达不清（如“GS”可能为笔误，“white”应为 Vite）的情况，影响专业性和可信度。',
              '整体回答较为笼统，缺乏完整的问题定位-分析-实施-验证的闭环逻辑，对性能瓶颈的识别与优化路径描述不清晰。',
            ],
          },
          section_name: '开发与性能优化',
        },
        {
          score_item: {
            score: 75,
            feedback: [
              '沟通表达较为清晰，能够围绕问题展开回答，但在部分环节回答不够完整，如开发与性能优化环节仅提及路由懒加载，缺乏更深入的技术细节。',
              '具备基本的协作意识，在被追问时能逐步补充思路，但主动性和深度有待提升。',
              '在面对不熟悉的问题时（如SSR hydration），能坦诚表示不清楚，并接受引导，表现出一定的学习态度和专业底线。',
              '对关键场景如跨端兼容、SSR异常处理有一定实践经验，能提出如条件判断避免window使用、client-only封装等合理方案。',
              "回答结构略显松散，部分表述重复或未完成（如'可以从 可以从'），影响整体流畅性与专业度。",
            ],
          },
          section_name: 'soft_skill',
        },
      ],
    },
    resume_match: {
      section_score: {
        score: 85,
        full_mark: 100,
        reason: [
          '匹配的技能：Vue, TypeScript, 前端工程化, 性能优化, 跨端开发, 数据可视化, RESTful API 调用, Webpack/Vite, ESLint/Prettier, 单元测试/E2E 测试',
          '候选人具备9年前端经验，远超要求的3年；精通Vue3、TypeScript、Vite/Webpack等核心技术，与岗位技术栈高度匹配；有丰富的性能优化（FCP优化、CDN监控）、工程化（Monorepo、CI/CD）、低代码/配置化开发经验；熟悉移动端跨端开发（UniApp）和数据可视化（ECharts）；参与过自动化测试体系建设，符合优先项；无明显缺失项；唯一潜在问题是岗位为兼职，而候选人当前为全职工作状态，可能存在时间安排冲突，但未明确拒绝兼职，故不视为硬性不符',
        ],
      },
      extra_info: {
        experience: {
          awards: [],
          patents: [],
          education: [
            {
              city: '北京',
              major: '计算机科学与技术',
              end_date: '2016',
              start_date: '2012',
              degree_type: '本科',
              institution: '北京交通大学海滨学院',
              achievements: ['学习标兵', '国家励志奖学金', '三好学生'],
              degree_status: '毕业',
            },
          ],
          publications: [],
          repositories: [],
          social_media: [],
          work_experience: [
            {
              city: 'None',
              title: '前端开发工程师',
              end_date: '至今',
              start_date: '2025/01',
              achievements: [
                '参与多端应用平台的整体技术架构设计与工程体系搭建，推进项目标准化与模块化落地。',
                '承担 Web 应用核心功能的设计与实现，涵盖页面渲染、权限控制、数据交互等关键模块。',
                '主导中后台系统的架构升级与功能整合，推动跨系统的权限体系与配置规则统一。',
                '建立前端研发流程规范，完善项目构建、部署与协作机制，提升开发与交付效率。',
                '参与平台可配置能力的建设与迭代，支持业务侧通过配置驱动实现页面与组件自动生成。',
              ],
              organization: '北京中文在线文化传媒有限公司',
              employment_type: '全职',
            },
            {
              city: 'None',
              title: '前端开发工程师',
              end_date: '2024/11',
              start_date: '2021/04',
              achievements: [
                '参与低代码平台与可视化搭建系统建设和业务功能开发，实现业务人员零代码生成推广页、活动页及其静态化部署流程。',
                '搭建得间作者、编辑平台，接入统一登录以及权限配置，封装富文本编辑器给作者和编辑提供文章编辑工具，提升用户工作效率和项目使用体验。',
                '搭建前端数据可视化看板，直观展示各种有效数据，方便运营同学修改活动配置及调整投放策略。',
                '推动平台稳定性与可观测性建设，接入实时监控、告警与组件使用数据分析机制，保障系统可靠性与演进依据。',
              ],
              organization: '掌阅科技股份有限公司',
              employment_type: '全职',
            },
            {
              city: 'None',
              title: '前端开发工程师',
              end_date: '2021/04',
              start_date: '2019/03',
              achievements: [
                '负责商家集团工作台项目迭代开发，使用微前端框架qiankun配置项目。',
                '独立完成新氧小绿卡项目开发，使用uniapp同时适配小程序和h5以及后台功能配置。',
                '参与其他中后台项目的改版升级以及功能迭代开发。',
              ],
              organization: '北京新氧万维科技咨询有限公司',
              employment_type: '全职',
            },
            {
              city: null,
              title: '前端开发工程师',
              end_date: '2019/03',
              start_date: '2016/06',
              achievements: [
                '独立负责运营后台及其他项目的功能版本迭代，实现技术栈的升级，逐步使用vue开发页面。',
              ],
              organization: '玫瑰视界(北京)网络科技有限公司',
              employment_type: '全职',
            },
          ],
          project_experience: [
            {
              role: '前端开发',
              end_date: '至今',
              start_date: '2025/01',
              achievements: [
                '搭建基于 Nuxt3 的服务端渲染架构，引入客户端懒加载与骨架屏方案，首屏 FCP 优化 44%（3.2s → 1.8s）',
                '配置 HTTP/2 服务推送机制，预加载关键样式与数据资源，TTFB 降低 35%',
                '构建 SEO 能力体系，支持结构化数据自动输出与死链智能重定向（拦截无效请求超 1200 次/日）',
                '实现多平台 OAuth 登录与国际化支付通道，打通从授权到支付的全链路，支付成功率达 98.7%',
                '搭建播放行为追踪机制，覆盖播放/暂停/加载异常等多类关键事件，支撑后续转化分析',
                '构建跨区域访问质量监控体系，支持埋点热力图与异常追踪，完播率提升 18%',
                '构建覆盖核心业务流程（登录 → 支付 → 解锁 → 播放）的自动化测试体系',
                '推动测试规范落地，集成 CI 流程，保障版本回归稳定性与缺陷回溯能力',
                '平台首屏加载体验显著提升，FCP 优化 1.4 秒，支持多区域内容加速与访问稳定性',
                '播放监控体系落地后快速识别多个 CDN 异常区域，完播率提升 18%',
                '支付链路打通后，新增付费转化率 7 日内增长 24.5%',
                '自动化测试体系有效降低线上回归缺陷率至 <2%，显著提升交付质量',
              ],
              organization: '海外短剧内容发行平台',
            },
            {
              role: '前端开发',
              end_date: '至今',
              start_date: '2025/01',
              achievements: [
                '采用 Monorepo 架构统一管理 Vben Admin 与 Ruoyi 系统模块，封装独立权限子包并复用于多项目，实现前后端权限配置自动同步，旧系统迁移成本降低 80%',
                '基于 VxeTable 封装 ProTable 组件，支持 Schema 驱动的动态表格渲染；自研 JSON Schema 驱动的 Form Generator 表单生成器，结合 Cursor AI 自动生成配置草稿，实现“配置即页面”的开发闭环',
                '推动配置化开发规范落地，输出《权限模块对接规范》《配置组件使用手册》等文档，统一组件开发流程，特殊场景需经架构审批，提升代码一致性与可维护性',
                '系统改造周期从 10 天压缩至 2 天，表单类页面开发人效从 3 人日优化至 0.5 人日，交付效率提升 6 倍',
              ],
              organization: 'B端管理系统',
            },
            {
              role: '前端开发',
              end_date: '2023/12',
              start_date: '2022/01',
              achievements: [
                '负责低代码平台的搭建与设计，使用Vue2/Vue3、JavaScript、Element-UI等技术实现可拖拽组件生成H5活动页面',
                '通过Lerna进行多包管理，使用Webpack打包，后台支持模块拖动排序、配置编辑、自动保存及发布功能',
                '实现SSO登录，支持多渠道活动页面创建（掌阅、得间、海外），并通过Node服务生成预览图',
                'H5页面支持多端展示（App、快应用、公众号、小程序），集成书籍下单支付功能，并通过埋点上报至火山引擎',
                '独立完成数据看板从0到1搭建，支持按活动ID和渠道多维度查看PV、UV、消费等数据，提供ECharts可视化展示',
              ],
              organization: '公司名称未提供',
            },
            {
              role: '前端开发',
              end_date: '2024/10',
              start_date: '2023/09',
              achievements: [
                '基于Vue3+TypeScript+Arco Design完成项目架构设计与搭建，接入统一登录SSO和网易易盾验证码，实现路由权限控制与自定义主题配置',
                '封装实名认证、创建书籍、签约、上下架、章节审核等公共弹窗组件，提升中后台模块复用性',
                '集成Tiptap富文本编辑器支持小说内容编辑，结合vue-diff与mark.js实现章节内容差异对比与高亮显示',
                '使用VueCropper实现头像上传裁剪，支持作者实名认证等功能',
                '新平台上线后提升编辑审核工作效率18%，成功迁移百余位作者，支持多类型文章创作与数据查看',
              ],
              organization: '得间',
            },
            {
              role: '前端开发',
              end_date: '2024/10',
              start_date: '2023/01',
              achievements: [
                '根据公司项目规范需求，基于Arco design Pro搭建后台平台脚手架，配置公共请求方式和mockjs数据模拟，按照公司统一登录要求配置sso登录方式，以及vite打包配置，脚手架应用于得间编辑后台、得间作者平台、技术管理平台、dmp平台等多个项目',
                '梳理内容中台项目，优化部署流程及环境配置，增加代码格式化配置及eslint校验，优化旧页面代码，并对页面报错进行上报及处理',
                '完成所有平台日常业务迭代需求，拆分部分业务代码，便于后续功能迭代',
              ],
              organization: '内容中台等项目',
            },
          ],
        },
        self_assessment: {
          skills: null,
          hobbies: null,
          summary:
            '拥有9年前端开发经验，参与20+项目，精通现代前端技术栈，主导多项目并行开发与高质量交付，擅长构建标准化研发流程与工程效能体系，具备出色的团队协作与跨部门沟通能力。',
          hard_skills: [
            {
              skill_name: 'Vue',
              proficiency: '精通',
            },
            {
              skill_name: 'HTML5/CSS3',
              proficiency: '精通',
            },
            {
              skill_name: 'JavaScript',
              proficiency: '精通',
            },
            {
              skill_name: 'TypeScript',
              proficiency: '精通',
            },
            {
              skill_name: 'Nuxt3/SSR',
              proficiency: '熟悉',
            },
          ],
          soft_skills: [
            '团队合作',
            '跨部门沟通',
            '项目协调',
            '高效执行',
            '问题解决',
          ],
        },
      },
    },
    avatar_url:
      'https://files.authing.co/authing-console/default-user-avatar.png',
    video_url:
      'https://video.meetchances.com/interview-recordings-output/prod_interview_room_1087_20250918T031004_processed.mp4?OSSAccessKeyId=LTAI5tSCzFJW1sPVpFLSV4U7&Expires=1758180552&Signature=TXOgXs%2FecQYgU3OXQMnBb4Sngq8%3D',
  },
}
