name: 构建并部署到阿里云OSS

on:
  push:
    branches:
      - main
      - test
  pull_request:
    branches:
      - main
      - test

# 设置GitHub Actions权限
permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # 构建和部署任务（在main或test分支推送时执行）
  build-and-deploy:
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test') && github.event_name == 'push'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: pnpm

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建项目
        env:
          CI: false
          NODE_ENV: production
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_AUTH_LOGIN_URL: ${{ secrets.VITE_AUTH_LOGIN_URL }}
          VITE_AUTH_LOGOUT_URL: ${{ secrets.VITE_AUTH_LOGOUT_URL }}
          VITE_INVITE_REDIRECT_URL: ${{ secrets.VITE_INVITE_REDIRECT_URL }}
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          VITE_APM_APP_ID: ${{ secrets.VITE_APM_APP_ID }}
          VITE_APM_APP_TOKEN: ${{ secrets.VITE_APM_APP_TOKEN }}
          VITE_APP_ENV: ${{ vars.VITE_APP_ENV }}
          VITE_RTC_APP_ID: ${{ vars.VITE_RTC_APP_ID }}
        run: pnpm run build

      - name: 验证构建产物
        run: |
          if [ ! -d "dist" ]; then
            echo "::error::构建目录 dist 不存在!"
            exit 1
          fi
          echo "构建成功，文件列表："
          ls -la dist/

      - name: 安装阿里云OSS工具
        run: |
          wget https://gosspublic.alicdn.com/ossutil/1.7.16/ossutil64 -O ossutil
          chmod +x ossutil
          sudo mv ossutil /usr/local/bin/

      - name: 配置OSS访问
        env:
          OSS_ENDPOINT: ${{ secrets.OSS_ENDPOINT || 'oss-cn-beijing.aliyuncs.com' }}
          OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
        run: |
          if [ -z "$OSS_ACCESS_KEY_ID" ]; then
            echo "::error::OSS_ACCESS_KEY_ID secret 未设置或为空!"
            exit 1
          fi
          if [ -z "$OSS_ACCESS_KEY_SECRET" ]; then
            echo "::error::OSS_ACCESS_KEY_SECRET secret 未设置或为空!"
            exit 1
          fi
          echo "配置OSS访问凭证..."
          ossutil config -i $OSS_ACCESS_KEY_ID -k $OSS_ACCESS_KEY_SECRET -e $OSS_ENDPOINT

      - name: 上传文件到OSS
        env:
          OSS_BUCKET: ${{ secrets.OSS_BUCKET }}
          OSS_PATH_PREFIX: ${{ secrets.OSS_PATH_PREFIX || '' }}
        run: |
          echo "🔍 当前分支: ${{ github.ref }}"
          echo "📦 目标OSS Bucket: $OSS_BUCKET"
          TARGET_PATH="oss://$OSS_BUCKET/"
          if [ -n "$OSS_PATH_PREFIX" ]; then
            TARGET_PATH="oss://$OSS_BUCKET/$OSS_PATH_PREFIX/"
          fi
          echo "📁 目标路径: $TARGET_PATH"
          echo "🚀 开始上传文件..."
          ossutil cp -r ./dist/ $TARGET_PATH --update --exclude ".*"
          echo "✅ 文件上传完成，验证上传结果:"
          ossutil ls $TARGET_PATH

      - name: 部署成功通知
        if: success()
        env:
          OSS_BUCKET: ${{ secrets.OSS_BUCKET }}
        run: |
          echo "🎉 部署成功!"
          echo "✅ 项目构建完成"
          echo "✅ 文件上传到OSS完成"
          echo "📦 部署环境: ${{ github.ref == 'refs/heads/main' && 'production' || 'testing' }}"
          echo "🪣 目标存储桶: $OSS_BUCKET"

      - name: 部署失败通知
        if: failure()
        run: |
          echo "❌ 部署失败!"
          echo "请检查构建日志和配置"

  # 自动打Tag任务（仅在main分支推送时执行）
  auto-tag:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 配置Git用户信息
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 获取当前版本号并生成新Tag
        id: generate-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "最新Tag: $LATEST_TAG"
          VERSION=${LATEST_TAG#v}
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "新Tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

          RELEASE_NOTES="## 🚀 自动发布 $NEW_TAG

          ### 📝 变更内容
          - 基于main分支最新代码自动构建发布

          ### 🔗 相关链接
          - 提交记录: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
          - 构建日志: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ### ⏰ 发布时间
          $(date '+%Y-%m-%d %H:%M:%S UTC')"

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 创建并推送Tag
        env:
          NEW_TAG: ${{ steps.generate-tag.outputs.NEW_TAG }}
        run: |
          git tag -a "$NEW_TAG" -m "🚀 自动发布 $NEW_TAG

          🔄 基于main分支提交 ${{ github.sha }} 自动创建
          🏗️ 构建ID: ${{ github.run_id }}
          📅 创建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          git push origin "$NEW_TAG"
          echo "✅ Tag $NEW_TAG 创建并推送成功!"

      - name: 创建GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate-tag.outputs.NEW_TAG }}
          release_name: 🚀 Release ${{ steps.generate-tag.outputs.NEW_TAG }}
          body: ${{ steps.generate-tag.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false

      - name: Tag创建成功通知
        if: success()
        run: |
          echo "🎉 自动Tag创建成功!"
          echo "🏷️ 新Tag: ${{ steps.generate-tag.outputs.NEW_TAG }}"
          echo "📦 GitHub Release已创建"
          echo "🔗 查看Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.generate-tag.outputs.NEW_TAG }}"

      - name: Tag创建失败通知
        if: failure()
        run: |
          echo "❌ 自动Tag创建失败!"
          echo "请检查权限设置和Git配置"


